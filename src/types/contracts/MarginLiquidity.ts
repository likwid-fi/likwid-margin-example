/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export type PoolStatusStruct = {
  blockTimestampLast: BigNumberish;
  realReserve0: BigNumberish;
  realReserve1: BigNumberish;
  mirrorReserve0: BigNumberish;
  mirrorReserve1: BigNumberish;
  marginFee: BigNumberish;
  lendingRealReserve0: BigNumberish;
  lendingRealReserve1: BigNumberish;
  lendingMirrorReserve0: BigNumberish;
  lendingMirrorReserve1: BigNumberish;
  truncatedReserve0: BigNumberish;
  truncatedReserve1: BigNumberish;
  rate0CumulativeLast: BigNumberish;
  rate1CumulativeLast: BigNumberish;
  key: PoolKeyStruct;
};

export type PoolStatusStructOutput = [
  blockTimestampLast: bigint,
  realReserve0: bigint,
  realReserve1: bigint,
  mirrorReserve0: bigint,
  mirrorReserve1: bigint,
  marginFee: bigint,
  lendingRealReserve0: bigint,
  lendingRealReserve1: bigint,
  lendingMirrorReserve0: bigint,
  lendingMirrorReserve1: bigint,
  truncatedReserve0: bigint,
  truncatedReserve1: bigint,
  rate0CumulativeLast: bigint,
  rate1CumulativeLast: bigint,
  key: PoolKeyStructOutput
] & {
  blockTimestampLast: bigint;
  realReserve0: bigint;
  realReserve1: bigint;
  mirrorReserve0: bigint;
  mirrorReserve1: bigint;
  marginFee: bigint;
  lendingRealReserve0: bigint;
  lendingRealReserve1: bigint;
  lendingMirrorReserve0: bigint;
  lendingMirrorReserve1: bigint;
  truncatedReserve0: bigint;
  truncatedReserve1: bigint;
  rate0CumulativeLast: bigint;
  rate1CumulativeLast: bigint;
  key: PoolKeyStructOutput;
};

export interface MarginLiquidityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accruesRatioX112Of"
      | "addInterests"
      | "addLiquidity"
      | "addPoolManager"
      | "allowance"
      | "allowanceOriginal"
      | "approve"
      | "balanceOf"
      | "balanceOriginal"
      | "changeLiquidity"
      | "datetimeStore"
      | "getFlowReserves"
      | "getInterestReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))"
      | "getInterestReserves(address,bytes32)"
      | "getMarginReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))"
      | "getMarginReserves(address,bytes32)"
      | "getMaxSliding"
      | "getPoolId"
      | "getPoolLiquidities"
      | "getPoolLiquidity"
      | "getPoolSupplies"
      | "getSupplies"
      | "interestOperator"
      | "interestStore0"
      | "interestStore1"
      | "isOperator"
      | "minHoldingDuration"
      | "owner"
      | "poolManagers"
      | "removeLiquidity"
      | "setMaxSliding"
      | "setOperator"
      | "supportsInterface"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "OperatorSet"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accruesRatioX112Of",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addInterests",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceOriginal",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOriginal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLiquidity",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "datetimeStore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowReserves",
    values: [AddressLike, BytesLike, PoolStatusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))",
    values: [AddressLike, BytesLike, PoolStatusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestReserves(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))",
    values: [AddressLike, BytesLike, PoolStatusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginReserves(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSliding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLiquidities",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLiquidity",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSupplies",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestStore0",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestStore1",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minHoldingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolManagers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSliding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruesRatioX112Of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "datetimeStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestReserves(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginReserves(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSliding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestStore0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestStore1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minHoldingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSliding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    caller: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    from: string,
    to: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    caller: string;
    from: string;
    to: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarginLiquidity extends BaseContract {
  connect(runner?: ContractRunner | null): MarginLiquidity;
  waitForDeployment(): Promise<this>;

  interface: MarginLiquidityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accruesRatioX112Of: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  addInterests: TypedContractMethod<
    [
      poolId: BytesLike,
      _reserve0: BigNumberish,
      _reserve1: BigNumberish,
      interest0: BigNumberish,
      interest1: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      id: BigNumberish,
      level: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addPoolManager: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  allowanceOriginal: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, id: BigNumberish, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOriginal: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  changeLiquidity: TypedContractMethod<
    [
      poolId: BytesLike,
      _reserve0: BigNumberish,
      _reserve1: BigNumberish,
      interest0: BigNumberish,
      interest1: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  datetimeStore: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFlowReserves: TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;

  "getInterestReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))": TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;

  "getInterestReserves(address,bytes32)": TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;

  "getMarginReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))": TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        marginReserve0: bigint;
        marginReserve1: bigint;
        incrementMaxMirror0: bigint;
        incrementMaxMirror1: bigint;
      }
    ],
    "view"
  >;

  "getMarginReserves(address,bytes32)": TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        marginReserve0: bigint;
        marginReserve1: bigint;
        incrementMaxMirror0: bigint;
        incrementMaxMirror1: bigint;
      }
    ],
    "view"
  >;

  getMaxSliding: TypedContractMethod<[], [bigint], "view">;

  getPoolId: TypedContractMethod<[poolId: BytesLike], [bigint], "view">;

  getPoolLiquidities: TypedContractMethod<
    [poolId: BytesLike, owner: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getPoolLiquidity: TypedContractMethod<
    [poolId: BytesLike, owner: AddressLike, level: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolSupplies: TypedContractMethod<
    [poolManager: AddressLike, poolId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        totalSupply: bigint;
        retainSupply0: bigint;
        retainSupply1: bigint;
      }
    ],
    "view"
  >;

  getSupplies: TypedContractMethod<
    [uPoolId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalSupply: bigint;
        retainSupply0: bigint;
        retainSupply1: bigint;
      }
    ],
    "view"
  >;

  interestOperator: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  interestStore0: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  interestStore1: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  isOperator: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  minHoldingDuration: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolManagers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  removeLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      id: BigNumberish,
      level: BigNumberish,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  setMaxSliding: TypedContractMethod<
    [_maxSliding: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transfer: TypedContractMethod<
    [receiver: AddressLike, id: BigNumberish, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      id: BigNumberish,
      _amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accruesRatioX112Of"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "addInterests"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      _reserve0: BigNumberish,
      _reserve1: BigNumberish,
      interest0: BigNumberish,
      interest1: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      id: BigNumberish,
      level: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPoolManager"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowanceOriginal"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, id: BigNumberish, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOriginal"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeLiquidity"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      _reserve0: BigNumberish,
      _reserve1: BigNumberish,
      interest0: BigNumberish,
      interest1: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "datetimeStore"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlowReserves"
  ): TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInterestReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))"
  ): TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInterestReserves(address,bytes32)"
  ): TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike],
    [[bigint, bigint] & { reserve0: bigint; reserve1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarginReserves(address,bytes32,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)))"
  ): TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike, status: PoolStatusStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        marginReserve0: bigint;
        marginReserve1: bigint;
        incrementMaxMirror0: bigint;
        incrementMaxMirror1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarginReserves(address,bytes32)"
  ): TypedContractMethod<
    [pairPoolManager: AddressLike, poolId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        marginReserve0: bigint;
        marginReserve1: bigint;
        incrementMaxMirror0: bigint;
        incrementMaxMirror1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxSliding"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[poolId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolLiquidities"
  ): TypedContractMethod<
    [poolId: BytesLike, owner: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolLiquidity"
  ): TypedContractMethod<
    [poolId: BytesLike, owner: AddressLike, level: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolSupplies"
  ): TypedContractMethod<
    [poolManager: AddressLike, poolId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        totalSupply: bigint;
        retainSupply0: bigint;
        retainSupply1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupplies"
  ): TypedContractMethod<
    [uPoolId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        totalSupply: bigint;
        retainSupply0: bigint;
        retainSupply1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "interestOperator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "interestStore0"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "interestStore1"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "minHoldingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolManagers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      id: BigNumberish,
      level: BigNumberish,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxSliding"
  ): TypedContractMethod<[_maxSliding: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [receiver: AddressLike, id: BigNumberish, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      id: BigNumberish,
      _amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OperatorSet(address,address,bool)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
