/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type MarginPositionStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  marginAmount: BigNumberish;
  marginTotal: BigNumberish;
  borrowAmount: BigNumberish;
  rawBorrowAmount: BigNumberish;
  rateCumulativeLast: BigNumberish;
};

export type MarginPositionStructOutput = [
  poolId: string,
  marginForOne: boolean,
  marginAmount: bigint,
  marginTotal: bigint,
  borrowAmount: bigint,
  rawBorrowAmount: bigint,
  rateCumulativeLast: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  marginAmount: bigint;
  marginTotal: bigint;
  borrowAmount: bigint;
  rawBorrowAmount: bigint;
  rateCumulativeLast: bigint;
};

export interface MarginCheckerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ONE_MILLION"
      | "checkLiquidate(address,uint256,bytes)"
      | "checkLiquidate((bytes32,bool,uint128,uint128,uint128,uint128,uint256),address)"
      | "checkLiquidate(address,uint256)"
      | "checkLiquidate(address,uint256[])"
      | "checkLiquidate(bytes32,bool,address,(bytes32,bool,uint128,uint128,uint128,uint128,uint256)[])"
      | "getLeverageParts"
      | "getLiquidateMillion"
      | "getMaxDecrease"
      | "getReserves"
      | "owner"
      | "setLeverageParts"
      | "setLiquidateMillion"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "ONE_MILLION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(address,uint256,bytes)",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate((bytes32,bool,uint128,uint128,uint128,uint128,uint256),address)",
    values: [MarginPositionStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(address,uint256[])",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(bytes32,bool,address,(bytes32,bool,uint128,uint128,uint128,uint128,uint256)[])",
    values: [BytesLike, boolean, AddressLike, MarginPositionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeverageParts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateMillion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDecrease",
    values: [MarginPositionStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BytesLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLeverageParts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateMillion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ONE_MILLION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate((bytes32,bool,uint128,uint128,uint128,uint128,uint256),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(bytes32,bool,address,(bytes32,bool,uint128,uint128,uint128,uint128,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeverageParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateMillion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarginChecker extends BaseContract {
  connect(runner?: ContractRunner | null): MarginChecker;
  waitForDeployment(): Promise<this>;

  interface: MarginCheckerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ONE_MILLION: TypedContractMethod<[], [bigint], "view">;

  "checkLiquidate(address,uint256,bytes)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [boolean],
    "view"
  >;

  "checkLiquidate((bytes32,bool,uint128,uint128,uint128,uint128,uint256),address)": TypedContractMethod<
    [_position: MarginPositionStruct, hook: AddressLike],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;

  "checkLiquidate(address,uint256)": TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;

  "checkLiquidate(address,uint256[])": TypedContractMethod<
    [manager: AddressLike, positionIds: BigNumberish[]],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;

  "checkLiquidate(bytes32,bool,address,(bytes32,bool,uint128,uint128,uint128,uint128,uint256)[])": TypedContractMethod<
    [
      poolId: BytesLike,
      marginForOne: boolean,
      hook: AddressLike,
      inPositions: MarginPositionStruct[]
    ],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;

  getLeverageParts: TypedContractMethod<[], [bigint[]], "view">;

  getLiquidateMillion: TypedContractMethod<[], [bigint], "view">;

  getMaxDecrease: TypedContractMethod<
    [_position: MarginPositionStruct, hook: AddressLike],
    [bigint],
    "view"
  >;

  getReserves: TypedContractMethod<
    [poolId: BytesLike, marginForOne: boolean, hook: AddressLike],
    [[bigint, bigint] & { reserveBorrow: bigint; reserveMargin: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setLeverageParts: TypedContractMethod<
    [_leverageParts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setLiquidateMillion: TypedContractMethod<
    [_liquidateMillion: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ONE_MILLION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkLiquidate(address,uint256,bytes)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate((bytes32,bool,uint128,uint128,uint128,uint128,uint256),address)"
  ): TypedContractMethod<
    [_position: MarginPositionStruct, hook: AddressLike],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate(address,uint256)"
  ): TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate(address,uint256[])"
  ): TypedContractMethod<
    [manager: AddressLike, positionIds: BigNumberish[]],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate(bytes32,bool,address,(bytes32,bool,uint128,uint128,uint128,uint128,uint256)[])"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      marginForOne: boolean,
      hook: AddressLike,
      inPositions: MarginPositionStruct[]
    ],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeverageParts"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLiquidateMillion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxDecrease"
  ): TypedContractMethod<
    [_position: MarginPositionStruct, hook: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<
    [poolId: BytesLike, marginForOne: boolean, hook: AddressLike],
    [[bigint, bigint] & { reserveBorrow: bigint; reserveMargin: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setLeverageParts"
  ): TypedContractMethod<
    [_leverageParts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidateMillion"
  ): TypedContractMethod<
    [_liquidateMillion: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
