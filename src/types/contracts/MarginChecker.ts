/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export type PoolStatusStruct = {
  blockTimestampLast: BigNumberish;
  realReserve0: BigNumberish;
  realReserve1: BigNumberish;
  mirrorReserve0: BigNumberish;
  mirrorReserve1: BigNumberish;
  marginFee: BigNumberish;
  lendingRealReserve0: BigNumberish;
  lendingRealReserve1: BigNumberish;
  lendingMirrorReserve0: BigNumberish;
  lendingMirrorReserve1: BigNumberish;
  truncatedReserve0: BigNumberish;
  truncatedReserve1: BigNumberish;
  rate0CumulativeLast: BigNumberish;
  rate1CumulativeLast: BigNumberish;
  key: PoolKeyStruct;
};

export type PoolStatusStructOutput = [
  blockTimestampLast: bigint,
  realReserve0: bigint,
  realReserve1: bigint,
  mirrorReserve0: bigint,
  mirrorReserve1: bigint,
  marginFee: bigint,
  lendingRealReserve0: bigint,
  lendingRealReserve1: bigint,
  lendingMirrorReserve0: bigint,
  lendingMirrorReserve1: bigint,
  truncatedReserve0: bigint,
  truncatedReserve1: bigint,
  rate0CumulativeLast: bigint,
  rate1CumulativeLast: bigint,
  key: PoolKeyStructOutput
] & {
  blockTimestampLast: bigint;
  realReserve0: bigint;
  realReserve1: bigint;
  mirrorReserve0: bigint;
  mirrorReserve1: bigint;
  marginFee: bigint;
  lendingRealReserve0: bigint;
  lendingRealReserve1: bigint;
  lendingMirrorReserve0: bigint;
  lendingMirrorReserve1: bigint;
  truncatedReserve0: bigint;
  truncatedReserve1: bigint;
  rate0CumulativeLast: bigint;
  rate1CumulativeLast: bigint;
  key: PoolKeyStructOutput;
};

export type MarginPositionStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  marginAmount: BigNumberish;
  marginTotal: BigNumberish;
  borrowAmount: BigNumberish;
  rawBorrowAmount: BigNumberish;
  rateCumulativeLast: BigNumberish;
};

export type MarginPositionStructOutput = [
  poolId: string,
  marginForOne: boolean,
  marginAmount: bigint,
  marginTotal: bigint,
  borrowAmount: bigint,
  rawBorrowAmount: bigint,
  rateCumulativeLast: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  marginAmount: bigint;
  marginTotal: bigint;
  borrowAmount: bigint;
  rawBorrowAmount: bigint;
  rateCumulativeLast: bigint;
};

export type MarginPositionVoStruct = {
  position: MarginPositionStruct;
  pnl: BigNumberish;
};

export type MarginPositionVoStructOutput = [
  position: MarginPositionStructOutput,
  pnl: bigint
] & { position: MarginPositionStructOutput; pnl: bigint };

export interface MarginCheckerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkLiquidate(address,uint256)"
      | "checkLiquidate(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))"
      | "checkLiquidate(address,uint256[])"
      | "checkMinMarginLevel"
      | "checkValidity"
      | "estimatePNL(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256),uint256)"
      | "estimatePNL(address,uint256,uint256)"
      | "getBorrowMax"
      | "getLiquidateRepayAmount((uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),bool,uint256)"
      | "getLiquidateRepayAmount(address,uint256)"
      | "getMarginMax"
      | "getMaxDecrease(address,uint256)"
      | "getMaxDecrease(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))"
      | "getPositions"
      | "getProfitMillions"
      | "getReserves"
      | "getThousandthsByLeverage"
      | "liquidationMarginLevel"
      | "liquidationRatio"
      | "minBorrowLevel"
      | "minMarginLevel"
      | "owner"
      | "setCallerProfit"
      | "setLeverageParts"
      | "setLiquidationMarginLevel"
      | "setLiquidationRatio"
      | "setMinBorrowLevel"
      | "setMinMarginLevel"
      | "setProtocolProfit"
      | "transferOwnership"
      | "updatePosition"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkLiquidate(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))",
    values: [AddressLike, PoolStatusStruct, MarginPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidate(address,uint256[])",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMinMarginLevel",
    values: [
      PoolStatusStruct,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkValidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePNL(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256),uint256)",
    values: [AddressLike, PoolStatusStruct, MarginPositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePNL(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowMax",
    values: [AddressLike, BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateRepayAmount((uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),bool,uint256)",
    values: [PoolStatusStruct, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidateRepayAmount(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginMax",
    values: [AddressLike, BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDecrease(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDecrease(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))",
    values: [AddressLike, PoolStatusStruct, MarginPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfitMillions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getThousandthsByLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMarginLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minMarginLevel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCallerProfit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageParts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMarginLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBorrowLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinMarginLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolProfit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePosition",
    values: [AddressLike, MarginPositionStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidate(address,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMinMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePNL(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePNL(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateRepayAmount((uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidateRepayAmount(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDecrease(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDecrease(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfitMillions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThousandthsByLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallerProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBorrowLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePosition",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarginChecker extends BaseContract {
  connect(runner?: ContractRunner | null): MarginChecker;
  waitForDeployment(): Promise<this>;

  interface: MarginCheckerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "checkLiquidate(address,uint256)": TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;

  "checkLiquidate(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))": TypedContractMethod<
    [
      poolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct
    ],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;

  "checkLiquidate(address,uint256[])": TypedContractMethod<
    [manager: AddressLike, positionIds: BigNumberish[]],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;

  checkMinMarginLevel: TypedContractMethod<
    [
      _status: PoolStatusStruct,
      marginForOne: boolean,
      leverage: BigNumberish,
      assetsAmount: BigNumberish,
      debtAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;

  checkValidity: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  "estimatePNL(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256),uint256)": TypedContractMethod<
    [
      pairPoolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct,
      closeMillionth: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "estimatePNL(address,uint256,uint256)": TypedContractMethod<
    [
      positionManager: AddressLike,
      positionId: BigNumberish,
      closeMillionth: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getBorrowMax: TypedContractMethod<
    [
      _poolManager: AddressLike,
      poolId: BytesLike,
      marginForOne: boolean,
      marginAmount: BigNumberish
    ],
    [[bigint, bigint] & { marginAmountIn: bigint; borrowMax: bigint }],
    "view"
  >;

  "getLiquidateRepayAmount((uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),bool,uint256)": TypedContractMethod<
    [
      _status: PoolStatusStruct,
      marginForOne: boolean,
      assetsAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "getLiquidateRepayAmount(address,uint256)": TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [bigint],
    "view"
  >;

  getMarginMax: TypedContractMethod<
    [
      _poolManager: AddressLike,
      poolId: BytesLike,
      marginForOne: boolean,
      leverage: BigNumberish
    ],
    [[bigint, bigint] & { marginMax: bigint; borrowAmount: bigint }],
    "view"
  >;

  "getMaxDecrease(address,uint256)": TypedContractMethod<
    [positionManager: AddressLike, positionId: BigNumberish],
    [bigint],
    "view"
  >;

  "getMaxDecrease(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))": TypedContractMethod<
    [
      _poolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct
    ],
    [bigint],
    "view"
  >;

  getPositions: TypedContractMethod<
    [positionManager: AddressLike, positionIds: BigNumberish[]],
    [MarginPositionVoStructOutput[]],
    "view"
  >;

  getProfitMillions: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getReserves: TypedContractMethod<
    [_poolManager: AddressLike, poolId: BytesLike, marginForOne: boolean],
    [[bigint, bigint] & { reserveBorrow: bigint; reserveMargin: bigint }],
    "view"
  >;

  getThousandthsByLeverage: TypedContractMethod<[], [bigint[]], "view">;

  liquidationMarginLevel: TypedContractMethod<[], [bigint], "view">;

  liquidationRatio: TypedContractMethod<[], [bigint], "view">;

  minBorrowLevel: TypedContractMethod<[], [bigint], "view">;

  minMarginLevel: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setCallerProfit: TypedContractMethod<
    [_callerProfit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLeverageParts: TypedContractMethod<
    [_leverageThousandths: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setLiquidationMarginLevel: TypedContractMethod<
    [_liquidationMarginLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationRatio: TypedContractMethod<
    [_liquidationRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinBorrowLevel: TypedContractMethod<
    [_minBorrowLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinMarginLevel: TypedContractMethod<
    [_minMarginLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolProfit: TypedContractMethod<
    [_protocolProfit: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePosition: TypedContractMethod<
    [positionManager: AddressLike, _position: MarginPositionStruct],
    [MarginPositionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkLiquidate(address,uint256)"
  ): TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))"
  ): TypedContractMethod<
    [
      poolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct
    ],
    [[boolean, bigint] & { liquidated: boolean; borrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkLiquidate(address,uint256[])"
  ): TypedContractMethod<
    [manager: AddressLike, positionIds: BigNumberish[]],
    [
      [boolean[], bigint[]] & {
        liquidatedList: boolean[];
        borrowAmountList: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkMinMarginLevel"
  ): TypedContractMethod<
    [
      _status: PoolStatusStruct,
      marginForOne: boolean,
      leverage: BigNumberish,
      assetsAmount: BigNumberish,
      debtAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkValidity"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatePNL(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256),uint256)"
  ): TypedContractMethod<
    [
      pairPoolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct,
      closeMillionth: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatePNL(address,uint256,uint256)"
  ): TypedContractMethod<
    [
      positionManager: AddressLike,
      positionId: BigNumberish,
      closeMillionth: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBorrowMax"
  ): TypedContractMethod<
    [
      _poolManager: AddressLike,
      poolId: BytesLike,
      marginForOne: boolean,
      marginAmount: BigNumberish
    ],
    [[bigint, bigint] & { marginAmountIn: bigint; borrowMax: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidateRepayAmount((uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),bool,uint256)"
  ): TypedContractMethod<
    [
      _status: PoolStatusStruct,
      marginForOne: boolean,
      assetsAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidateRepayAmount(address,uint256)"
  ): TypedContractMethod<
    [manager: AddressLike, positionId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarginMax"
  ): TypedContractMethod<
    [
      _poolManager: AddressLike,
      poolId: BytesLike,
      marginForOne: boolean,
      leverage: BigNumberish
    ],
    [[bigint, bigint] & { marginMax: bigint; borrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxDecrease(address,uint256)"
  ): TypedContractMethod<
    [positionManager: AddressLike, positionId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxDecrease(address,(uint32,uint112,uint112,uint112,uint112,uint24,uint112,uint112,uint112,uint112,uint112,uint112,uint256,uint256,(address,address,uint24,int24,address)),(bytes32,bool,uint128,uint128,uint128,uint128,uint256))"
  ): TypedContractMethod<
    [
      _poolManager: AddressLike,
      _status: PoolStatusStruct,
      _position: MarginPositionStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositions"
  ): TypedContractMethod<
    [positionManager: AddressLike, positionIds: BigNumberish[]],
    [MarginPositionVoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfitMillions"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<
    [_poolManager: AddressLike, poolId: BytesLike, marginForOne: boolean],
    [[bigint, bigint] & { reserveBorrow: bigint; reserveMargin: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThousandthsByLeverage"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "liquidationMarginLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidationRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBorrowLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minMarginLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCallerProfit"
  ): TypedContractMethod<[_callerProfit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLeverageParts"
  ): TypedContractMethod<
    [_leverageThousandths: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationMarginLevel"
  ): TypedContractMethod<
    [_liquidationMarginLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationRatio"
  ): TypedContractMethod<
    [_liquidationRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinBorrowLevel"
  ): TypedContractMethod<[_minBorrowLevel: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinMarginLevel"
  ): TypedContractMethod<[_minMarginLevel: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolProfit"
  ): TypedContractMethod<[_protocolProfit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePosition"
  ): TypedContractMethod<
    [positionManager: AddressLike, _position: MarginPositionStruct],
    [MarginPositionStructOutput],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
