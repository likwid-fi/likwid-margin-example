/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export type PoolStatusStruct = {
  blockTimestampLast: BigNumberish;
  realReserve0: BigNumberish;
  realReserve1: BigNumberish;
  mirrorReserve0: BigNumberish;
  mirrorReserve1: BigNumberish;
  marginFee: BigNumberish;
  lendingRealReserve0: BigNumberish;
  lendingRealReserve1: BigNumberish;
  lendingMirrorReserve0: BigNumberish;
  lendingMirrorReserve1: BigNumberish;
  truncatedReserve0: BigNumberish;
  truncatedReserve1: BigNumberish;
  rate0CumulativeLast: BigNumberish;
  rate1CumulativeLast: BigNumberish;
  key: PoolKeyStruct;
};

export type PoolStatusStructOutput = [
  blockTimestampLast: bigint,
  realReserve0: bigint,
  realReserve1: bigint,
  mirrorReserve0: bigint,
  mirrorReserve1: bigint,
  marginFee: bigint,
  lendingRealReserve0: bigint,
  lendingRealReserve1: bigint,
  lendingMirrorReserve0: bigint,
  lendingMirrorReserve1: bigint,
  truncatedReserve0: bigint,
  truncatedReserve1: bigint,
  rate0CumulativeLast: bigint,
  rate1CumulativeLast: bigint,
  key: PoolKeyStructOutput
] & {
  blockTimestampLast: bigint;
  realReserve0: bigint;
  realReserve1: bigint;
  mirrorReserve0: bigint;
  mirrorReserve1: bigint;
  marginFee: bigint;
  lendingRealReserve0: bigint;
  lendingRealReserve1: bigint;
  lendingMirrorReserve0: bigint;
  lendingMirrorReserve1: bigint;
  truncatedReserve0: bigint;
  truncatedReserve1: bigint;
  rate0CumulativeLast: bigint;
  rate1CumulativeLast: bigint;
  key: PoolKeyStructOutput;
};

export interface LendingPoolManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accruesRatioX112Of"
      | "allowance"
      | "allowanceOriginal"
      | "approve"
      | "balanceAccounts"
      | "balanceMirror"
      | "balanceOf"
      | "balanceOriginal"
      | "computeRealAmount"
      | "deposit(address,address,bytes32,address,uint256)"
      | "deposit(address,bytes32,address,uint256)"
      | "deviationOf"
      | "getGrownRatioX112"
      | "getLendingAPR"
      | "handleBalanceMirror"
      | "handleDeposit"
      | "handleWithdraw"
      | "isOperator"
      | "mirrorIn"
      | "mirrorInRealOut"
      | "mirrorTokenManager"
      | "owner"
      | "pairPoolManager"
      | "poolManager"
      | "realIn"
      | "reserveOut"
      | "setOperator"
      | "setPairPoolManger"
      | "supportsInterface"
      | "sync"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unlockCallback"
      | "updateInterests"
      | "updateProtocolInterests"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Deposit"
      | "OperatorSet"
      | "OwnershipTransferred"
      | "Sync"
      | "Transfer"
      | "UpdateInterestRatio"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accruesRatioX112Of",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceOriginal",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAccounts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceMirror",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOriginal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRealAmount",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,address,bytes32,address,uint256)",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,bytes32,address,uint256)",
    values: [AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deviationOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGrownRatioX112",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingAPR",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleBalanceMirror",
    values: [AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDeposit",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleWithdraw",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorIn",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorInRealOut",
    values: [BytesLike, PoolStatusStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realIn",
    values: [AddressLike, AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveOut",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      PoolStatusStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairPoolManger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [BytesLike, PoolStatusStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterests",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolInterests",
    values: [AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BytesLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruesRatioX112Of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRealAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,address,bytes32,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,bytes32,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deviationOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrownRatioX112",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleBalanceMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mirrorIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mirrorInRealOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "realIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairPoolManger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    poolId: BytesLike,
    currency: AddressLike,
    sender: AddressLike,
    tokeId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish,
    originalAmount: BigNumberish,
    incrementRatioX112: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    currency: string,
    sender: string,
    tokeId: bigint,
    recipient: string,
    amount: bigint,
    originalAmount: bigint,
    incrementRatioX112: bigint
  ];
  export interface OutputObject {
    poolId: string;
    currency: string;
    sender: string;
    tokeId: bigint;
    recipient: string;
    amount: bigint;
    originalAmount: bigint;
    incrementRatioX112: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SyncEvent {
  export type InputTuple = [
    poolId: BytesLike,
    id0: BigNumberish,
    reserve0: BigNumberish,
    total0: BigNumberish,
    deviation0: BigNumberish,
    id1: BigNumberish,
    reserve1: BigNumberish,
    total1: BigNumberish,
    deviation1: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    id0: bigint,
    reserve0: bigint,
    total0: bigint,
    deviation0: bigint,
    id1: bigint,
    reserve1: bigint,
    total1: bigint,
    deviation1: bigint
  ];
  export interface OutputObject {
    poolId: string;
    id0: bigint;
    reserve0: bigint;
    total0: bigint;
    deviation0: bigint;
    id1: bigint;
    reserve1: bigint;
    total1: bigint;
    deviation1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    caller: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    from: string,
    to: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    caller: string;
    from: string;
    to: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateInterestRatioEvent {
  export type InputTuple = [
    id: BigNumberish,
    totalSupply: BigNumberish,
    interest: BigNumberish,
    incrementRatioX112Old: BigNumberish,
    incrementRatioX112New: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    totalSupply: bigint,
    interest: bigint,
    incrementRatioX112Old: bigint,
    incrementRatioX112New: bigint
  ];
  export interface OutputObject {
    id: bigint;
    totalSupply: bigint;
    interest: bigint;
    incrementRatioX112Old: bigint;
    incrementRatioX112New: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    poolId: BytesLike,
    currency: AddressLike,
    sender: AddressLike,
    tokeId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish,
    originalAmount: BigNumberish,
    incrementRatioX112: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    currency: string,
    sender: string,
    tokeId: bigint,
    recipient: string,
    amount: bigint,
    originalAmount: bigint,
    incrementRatioX112: bigint
  ];
  export interface OutputObject {
    poolId: string;
    currency: string;
    sender: string;
    tokeId: bigint;
    recipient: string;
    amount: bigint;
    originalAmount: bigint;
    incrementRatioX112: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPoolManager extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPoolManager;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accruesRatioX112Of: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  allowanceOriginal: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, id: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceAccounts: TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceMirror: TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  balanceOf: TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOriginal: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  computeRealAmount: TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, originalAmount: BigNumberish],
    [bigint],
    "view"
  >;

  "deposit(address,address,bytes32,address,uint256)": TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "deposit(address,bytes32,address,uint256)": TypedContractMethod<
    [
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  deviationOf: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getGrownRatioX112: TypedContractMethod<
    [id: BigNumberish, growAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getLendingAPR: TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, inputAmount: BigNumberish],
    [bigint],
    "view"
  >;

  handleBalanceMirror: TypedContractMethod<
    [
      sender: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  handleDeposit: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  handleWithdraw: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isOperator: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  mirrorIn: TypedContractMethod<
    [
      caller: AddressLike,
      receiver: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mirrorInRealOut: TypedContractMethod<
    [
      poolId: BytesLike,
      status: PoolStatusStruct,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  mirrorTokenManager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pairPoolManager: TypedContractMethod<[], [string], "view">;

  poolManager: TypedContractMethod<[], [string], "view">;

  realIn: TypedContractMethod<
    [
      caller: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  reserveOut: TypedContractMethod<
    [
      caller: AddressLike,
      payer: AddressLike,
      poolId: BytesLike,
      status: PoolStatusStruct,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;

  setPairPoolManger: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  sync: TypedContractMethod<
    [poolId: BytesLike, status: PoolStatusStruct],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  transfer: TypedContractMethod<
    [receiver: AddressLike, id: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      id: BigNumberish,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockCallback: TypedContractMethod<
    [data: BytesLike],
    [string],
    "nonpayable"
  >;

  updateInterests: TypedContractMethod<
    [id: BigNumberish, interest: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProtocolInterests: TypedContractMethod<
    [
      caller: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      interest: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accruesRatioX112Of"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowanceOriginal"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, id: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceAccounts"
  ): TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceMirror"
  ): TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOriginal"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeRealAmount"
  ): TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, originalAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit(address,address,bytes32,address,uint256)"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit(address,bytes32,address,uint256)"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deviationOf"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGrownRatioX112"
  ): TypedContractMethod<
    [id: BigNumberish, growAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLendingAPR"
  ): TypedContractMethod<
    [poolId: BytesLike, currency: AddressLike, inputAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleBalanceMirror"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleDeposit"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleWithdraw"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mirrorIn"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      receiver: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorInRealOut"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      status: PoolStatusStruct,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairPoolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "realIn"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveOut"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      payer: AddressLike,
      poolId: BytesLike,
      status: PoolStatusStruct,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPairPoolManger"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "sync"
  ): TypedContractMethod<
    [poolId: BytesLike, status: PoolStatusStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [receiver: AddressLike, id: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      receiver: AddressLike,
      id: BigNumberish,
      amount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockCallback"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInterests"
  ): TypedContractMethod<
    [id: BigNumberish, interest: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProtocolInterests"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      interest: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      poolId: BytesLike,
      currency: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Sync"
  ): TypedContractEvent<
    SyncEvent.InputTuple,
    SyncEvent.OutputTuple,
    SyncEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateInterestRatio"
  ): TypedContractEvent<
    UpdateInterestRatioEvent.InputTuple,
    UpdateInterestRatioEvent.OutputTuple,
    UpdateInterestRatioEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Deposit(bytes32,address,address,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "OperatorSet(address,address,bool)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Sync(bytes32,uint256,uint256,uint256,int256,uint256,uint256,uint256,int256)": TypedContractEvent<
      SyncEvent.InputTuple,
      SyncEvent.OutputTuple,
      SyncEvent.OutputObject
    >;
    Sync: TypedContractEvent<
      SyncEvent.InputTuple,
      SyncEvent.OutputTuple,
      SyncEvent.OutputObject
    >;

    "Transfer(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateInterestRatio(uint256,uint256,int256,uint256,uint256)": TypedContractEvent<
      UpdateInterestRatioEvent.InputTuple,
      UpdateInterestRatioEvent.OutputTuple,
      UpdateInterestRatioEvent.OutputObject
    >;
    UpdateInterestRatio: TypedContractEvent<
      UpdateInterestRatioEvent.InputTuple,
      UpdateInterestRatioEvent.OutputTuple,
      UpdateInterestRatioEvent.OutputObject
    >;

    "Withdraw(bytes32,address,address,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
