/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AddLiquidityParamsStruct = {
  poolId: BytesLike;
  amount0: BigNumberish;
  amount1: BigNumberish;
  tickLower: BigNumberish;
  tickUpper: BigNumberish;
  level: BigNumberish;
  to: AddressLike;
  deadline: BigNumberish;
};

export type AddLiquidityParamsStructOutput = [
  poolId: string,
  amount0: bigint,
  amount1: bigint,
  tickLower: bigint,
  tickUpper: bigint,
  level: bigint,
  to: string,
  deadline: bigint
] & {
  poolId: string;
  amount0: bigint;
  amount1: bigint;
  tickLower: bigint;
  tickUpper: bigint;
  level: bigint;
  to: string;
  deadline: bigint;
};

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export type HookStatusStruct = {
  realReserve0: BigNumberish;
  realReserve1: BigNumberish;
  mirrorReserve0: BigNumberish;
  mirrorReserve1: BigNumberish;
  marginFee: BigNumberish;
  blockTimestampLast: BigNumberish;
  interestRatio0X112: BigNumberish;
  interestRatio1X112: BigNumberish;
  rate0CumulativeLast: BigNumberish;
  rate1CumulativeLast: BigNumberish;
  marginTimestampLast: BigNumberish;
  lastPrice1X112: BigNumberish;
  key: PoolKeyStruct;
};

export type HookStatusStructOutput = [
  realReserve0: bigint,
  realReserve1: bigint,
  mirrorReserve0: bigint,
  mirrorReserve1: bigint,
  marginFee: bigint,
  blockTimestampLast: bigint,
  interestRatio0X112: bigint,
  interestRatio1X112: bigint,
  rate0CumulativeLast: bigint,
  rate1CumulativeLast: bigint,
  marginTimestampLast: bigint,
  lastPrice1X112: bigint,
  key: PoolKeyStructOutput
] & {
  realReserve0: bigint;
  realReserve1: bigint;
  mirrorReserve0: bigint;
  mirrorReserve1: bigint;
  marginFee: bigint;
  blockTimestampLast: bigint;
  interestRatio0X112: bigint;
  interestRatio1X112: bigint;
  rate0CumulativeLast: bigint;
  rate1CumulativeLast: bigint;
  marginTimestampLast: bigint;
  lastPrice1X112: bigint;
  key: PoolKeyStructOutput;
};

export type MarginParamsStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  leverage: BigNumberish;
  marginAmount: BigNumberish;
  marginTotal: BigNumberish;
  borrowAmount: BigNumberish;
  borrowMinAmount: BigNumberish;
  recipient: AddressLike;
  deadline: BigNumberish;
};

export type MarginParamsStructOutput = [
  poolId: string,
  marginForOne: boolean,
  leverage: bigint,
  marginAmount: bigint,
  marginTotal: bigint,
  borrowAmount: bigint,
  borrowMinAmount: bigint,
  recipient: string,
  deadline: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  leverage: bigint;
  marginAmount: bigint;
  marginTotal: bigint;
  borrowAmount: bigint;
  borrowMinAmount: bigint;
  recipient: string;
  deadline: bigint;
};

export type ReleaseParamsStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  payer: AddressLike;
  repayAmount: BigNumberish;
  releaseAmount: BigNumberish;
  rawBorrowAmount: BigNumberish;
  deadline: BigNumberish;
};

export type ReleaseParamsStructOutput = [
  poolId: string,
  marginForOne: boolean,
  payer: string,
  repayAmount: bigint,
  releaseAmount: bigint,
  rawBorrowAmount: bigint,
  deadline: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  payer: string;
  repayAmount: bigint;
  releaseAmount: bigint;
  rawBorrowAmount: bigint;
  deadline: bigint;
};

export type RemoveLiquidityParamsStruct = {
  poolId: BytesLike;
  level: BigNumberish;
  liquidity: BigNumberish;
  deadline: BigNumberish;
};

export type RemoveLiquidityParamsStructOutput = [
  poolId: string,
  level: bigint,
  liquidity: bigint,
  deadline: bigint
] & { poolId: string; level: bigint; liquidity: bigint; deadline: bigint };

export declare namespace IPoolManager {
  export type ModifyLiquidityParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    salt: BytesLike;
  };

  export type ModifyLiquidityParamsStructOutput = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidityDelta: bigint,
    salt: string
  ] & {
    tickLower: bigint;
    tickUpper: bigint;
    liquidityDelta: bigint;
    salt: string;
  };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    zeroForOne: boolean,
    amountSpecified: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    zeroForOne: boolean;
    amountSpecified: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace Hooks {
  export type PermissionsStruct = {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };

  export type PermissionsStructOutput = [
    beforeInitialize: boolean,
    afterInitialize: boolean,
    beforeAddLiquidity: boolean,
    afterAddLiquidity: boolean,
    beforeRemoveLiquidity: boolean,
    afterRemoveLiquidity: boolean,
    beforeSwap: boolean,
    afterSwap: boolean,
    beforeDonate: boolean,
    afterDonate: boolean,
    beforeSwapReturnDelta: boolean,
    afterSwapReturnDelta: boolean,
    afterAddLiquidityReturnDelta: boolean,
    afterRemoveLiquidityReturnDelta: boolean
  ] & {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };
}

export interface MarginHookManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINIMUM_LIQUIDITY"
      | "ONE_BILLION"
      | "ONE_MILLION"
      | "SQRT_RATIO_1_1"
      | "YEAR_SECONDS"
      | "addLiquidity"
      | "addPositionManager"
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
      | "getAmountIn"
      | "getAmountOut"
      | "getHookPermissions"
      | "getReserves"
      | "getStatus"
      | "handleAddLiquidity"
      | "handleMargin"
      | "handleRelease"
      | "handleRemoveLiquidity"
      | "hookStatusStore"
      | "initialize"
      | "kLast"
      | "margin"
      | "marginFees"
      | "marginLiquidity"
      | "marginOracle"
      | "mirrorTokenManager"
      | "owner"
      | "poolManager"
      | "positionManagers"
      | "release"
      | "removeLiquidity"
      | "setFeeStatus"
      | "setMarginFees"
      | "setMarginOracle"
      | "transferOwnership"
      | "unlockCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Burn"
      | "Initialize"
      | "Mint"
      | "OwnershipTransferred"
      | "Sync"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_BILLION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_MILLION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SQRT_RATIO_1_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YEAR_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addPositionManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BytesLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHookPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAddLiquidity",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleMargin",
    values: [AddressLike, MarginParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "handleRelease",
    values: [ReleaseParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "handleRemoveLiquidity",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hookStatusStore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PoolKeyStruct]
  ): string;
  encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "margin",
    values: [MarginParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marginFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorTokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManagers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [ReleaseParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_BILLION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_MILLION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SQRT_RATIO_1_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hookStatusStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "margin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marginFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marginLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;
}

export namespace BurnEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    liquidity: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    liquidity: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    liquidity: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [
    id: BytesLike,
    currency0: AddressLike,
    currency1: AddressLike,
    fee: BigNumberish,
    tickSpacing: BigNumberish,
    hooks: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    currency0: string,
    currency1: string,
    fee: bigint,
    tickSpacing: bigint,
    hooks: string
  ];
  export interface OutputObject {
    id: string;
    currency0: string;
    currency1: string;
    fee: bigint;
    tickSpacing: bigint;
    hooks: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    to: AddressLike,
    liquidity: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    to: string,
    liquidity: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    to: string;
    liquidity: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SyncEvent {
  export type InputTuple = [
    poolId: BytesLike,
    realReserve0: BigNumberish,
    realReserve1: BigNumberish,
    mirrorReserve0: BigNumberish,
    mirrorReserve1: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    realReserve0: bigint,
    realReserve1: bigint,
    mirrorReserve0: bigint,
    mirrorReserve1: bigint
  ];
  export interface OutputObject {
    poolId: string;
    realReserve0: bigint;
    realReserve1: bigint;
    mirrorReserve0: bigint;
    mirrorReserve1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarginHookManager extends BaseContract {
  connect(runner?: ContractRunner | null): MarginHookManager;
  waitForDeployment(): Promise<this>;

  interface: MarginHookManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINIMUM_LIQUIDITY: TypedContractMethod<[], [bigint], "view">;

  ONE_BILLION: TypedContractMethod<[], [bigint], "view">;

  ONE_MILLION: TypedContractMethod<[], [bigint], "view">;

  SQRT_RATIO_1_1: TypedContractMethod<[], [bigint], "view">;

  YEAR_SECONDS: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [params: AddLiquidityParamsStruct],
    [bigint],
    "payable"
  >;

  addPositionManager: TypedContractMethod<
    [_marginPositionManager: AddressLike],
    [void],
    "nonpayable"
  >;

  afterAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  afterDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterInitialize: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  afterRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  beforeAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "view"
  >;

  beforeDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeInitialize: TypedContractMethod<
    [arg0: AddressLike, key: PoolKeyStruct, arg2: BigNumberish],
    [string],
    "view"
  >;

  beforeRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [[string, bigint, bigint]],
    "nonpayable"
  >;

  getAmountIn: TypedContractMethod<
    [poolId: BytesLike, zeroForOne: boolean, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  getAmountOut: TypedContractMethod<
    [poolId: BytesLike, zeroForOne: boolean, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  getHookPermissions: TypedContractMethod<
    [],
    [Hooks.PermissionsStructOutput],
    "view"
  >;

  getReserves: TypedContractMethod<
    [poolId: BytesLike],
    [[bigint, bigint] & { _reserve0: bigint; _reserve1: bigint }],
    "view"
  >;

  getStatus: TypedContractMethod<
    [poolId: BytesLike],
    [HookStatusStructOutput],
    "view"
  >;

  handleAddLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  handleMargin: TypedContractMethod<
    [_positionManager: AddressLike, params: MarginParamsStruct],
    [[bigint, bigint] & { marginWithoutFee: bigint; borrowAmount: bigint }],
    "nonpayable"
  >;

  handleRelease: TypedContractMethod<
    [params: ReleaseParamsStruct],
    [bigint],
    "nonpayable"
  >;

  handleRemoveLiquidity: TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hookStatusStore: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        PoolKeyStructOutput
      ] & {
        realReserve0: bigint;
        realReserve1: bigint;
        mirrorReserve0: bigint;
        mirrorReserve1: bigint;
        marginFee: bigint;
        blockTimestampLast: bigint;
        interestRatio0X112: bigint;
        interestRatio1X112: bigint;
        rate0CumulativeLast: bigint;
        rate1CumulativeLast: bigint;
        marginTimestampLast: bigint;
        lastPrice1X112: bigint;
        key: PoolKeyStructOutput;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[key: PoolKeyStruct], [void], "nonpayable">;

  kLast: TypedContractMethod<[], [bigint], "view">;

  margin: TypedContractMethod<
    [params: MarginParamsStruct],
    [MarginParamsStructOutput],
    "nonpayable"
  >;

  marginFees: TypedContractMethod<[], [string], "view">;

  marginLiquidity: TypedContractMethod<[], [string], "view">;

  marginOracle: TypedContractMethod<[], [string], "view">;

  mirrorTokenManager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolManager: TypedContractMethod<[], [string], "view">;

  positionManagers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  release: TypedContractMethod<
    [params: ReleaseParamsStruct],
    [bigint],
    "payable"
  >;

  removeLiquidity: TypedContractMethod<
    [params: RemoveLiquidityParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  setFeeStatus: TypedContractMethod<
    [poolId: BytesLike, _marginFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarginFees: TypedContractMethod<
    [_marginFees: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarginOracle: TypedContractMethod<
    [_oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockCallback: TypedContractMethod<
    [data: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINIMUM_LIQUIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_BILLION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_MILLION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SQRT_RATIO_1_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "YEAR_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [params: AddLiquidityParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addPositionManager"
  ): TypedContractMethod<
    [_marginPositionManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterInitialize"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "beforeDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeInitialize"
  ): TypedContractMethod<
    [arg0: AddressLike, key: PoolKeyStruct, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "beforeRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [[string, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAmountIn"
  ): TypedContractMethod<
    [poolId: BytesLike, zeroForOne: boolean, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountOut"
  ): TypedContractMethod<
    [poolId: BytesLike, zeroForOne: boolean, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHookPermissions"
  ): TypedContractMethod<[], [Hooks.PermissionsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [[bigint, bigint] & { _reserve0: bigint; _reserve1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[poolId: BytesLike], [HookStatusStructOutput], "view">;
  getFunction(
    nameOrSignature: "handleAddLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleMargin"
  ): TypedContractMethod<
    [_positionManager: AddressLike, params: MarginParamsStruct],
    [[bigint, bigint] & { marginWithoutFee: bigint; borrowAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleRelease"
  ): TypedContractMethod<[params: ReleaseParamsStruct], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "handleRemoveLiquidity"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hookStatusStore"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        PoolKeyStructOutput
      ] & {
        realReserve0: bigint;
        realReserve1: bigint;
        mirrorReserve0: bigint;
        mirrorReserve1: bigint;
        marginFee: bigint;
        blockTimestampLast: bigint;
        interestRatio0X112: bigint;
        interestRatio1X112: bigint;
        rate0CumulativeLast: bigint;
        rate1CumulativeLast: bigint;
        marginTimestampLast: bigint;
        lastPrice1X112: bigint;
        key: PoolKeyStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[key: PoolKeyStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kLast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "margin"
  ): TypedContractMethod<
    [params: MarginParamsStruct],
    [MarginParamsStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marginFees"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marginLiquidity"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marginOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mirrorTokenManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManagers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[params: ReleaseParamsStruct], [bigint], "payable">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [params: RemoveLiquidityParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeStatus"
  ): TypedContractMethod<
    [poolId: BytesLike, _marginFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarginFees"
  ): TypedContractMethod<[_marginFees: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarginOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockCallback"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;

  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "Initialize"
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Sync"
  ): TypedContractEvent<
    SyncEvent.InputTuple,
    SyncEvent.OutputTuple,
    SyncEvent.OutputObject
  >;

  filters: {
    "Burn(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "Initialize(bytes32,address,address,uint24,int24,address)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "Mint(bytes32,address,address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Sync(bytes32,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SyncEvent.InputTuple,
      SyncEvent.OutputTuple,
      SyncEvent.OutputObject
    >;
    Sync: TypedContractEvent<
      SyncEvent.InputTuple,
      SyncEvent.OutputTuple,
      SyncEvent.OutputObject
    >;
  };
}
