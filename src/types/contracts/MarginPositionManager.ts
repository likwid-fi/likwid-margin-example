/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type MarginPositionStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  marginAmount: BigNumberish;
  marginTotal: BigNumberish;
  borrowAmount: BigNumberish;
  rawBorrowAmount: BigNumberish;
  rateCumulativeLast: BigNumberish;
};

export type MarginPositionStructOutput = [
  poolId: string,
  marginForOne: boolean,
  marginAmount: bigint,
  marginTotal: bigint,
  borrowAmount: bigint,
  rawBorrowAmount: bigint,
  rateCumulativeLast: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  marginAmount: bigint;
  marginTotal: bigint;
  borrowAmount: bigint;
  rawBorrowAmount: bigint;
  rateCumulativeLast: bigint;
};

export type MarginParamsStruct = {
  poolId: BytesLike;
  marginForOne: boolean;
  leverage: BigNumberish;
  marginAmount: BigNumberish;
  borrowAmount: BigNumberish;
  borrowMaxAmount: BigNumberish;
  deadline: BigNumberish;
};

export type MarginParamsStructOutput = [
  poolId: string,
  marginForOne: boolean,
  leverage: bigint,
  marginAmount: bigint,
  borrowAmount: bigint,
  borrowMaxAmount: bigint,
  deadline: bigint
] & {
  poolId: string;
  marginForOne: boolean;
  leverage: bigint;
  marginAmount: bigint;
  borrowAmount: bigint;
  borrowMaxAmount: bigint;
  deadline: bigint;
};

export interface MarginPositionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "checker"
      | "close"
      | "getApproved"
      | "getPosition"
      | "getPositionId"
      | "isApprovedForAll"
      | "liquidateBurn"
      | "liquidateCall"
      | "margin"
      | "modify"
      | "name"
      | "owner"
      | "ownerOf"
      | "pairPoolManager"
      | "repay"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setMarginChecker"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Burn"
      | "CheckerChanged"
      | "Liquidate"
      | "Margin"
      | "Mint"
      | "Modify"
      | "OwnershipTransferred"
      | "RepayClose"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionId",
    values: [BytesLike, boolean, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "margin",
    values: [MarginParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modify",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginChecker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "margin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    positionId: BigNumberish,
    burnType: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    positionId: bigint,
    burnType: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    positionId: bigint;
    burnType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckerChangedEvent {
  export type InputTuple = [oldChecker: AddressLike, newChecker: AddressLike];
  export type OutputTuple = [oldChecker: string, newChecker: string];
  export interface OutputObject {
    oldChecker: string;
    newChecker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    positionId: BigNumberish,
    marginAmount: BigNumberish,
    marginTotal: BigNumberish,
    borrowAmount: BigNumberish,
    oracleReserves: BigNumberish,
    statusReserves: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    positionId: bigint,
    marginAmount: bigint,
    marginTotal: bigint,
    borrowAmount: bigint,
    oracleReserves: bigint,
    statusReserves: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    positionId: bigint;
    marginAmount: bigint;
    marginTotal: bigint;
    borrowAmount: bigint;
    oracleReserves: bigint;
    statusReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarginEvent {
  export type InputTuple = [
    poolId: BytesLike,
    owner: AddressLike,
    positionId: BigNumberish,
    marginAmount: BigNumberish,
    marginTotal: BigNumberish,
    borrowAmount: BigNumberish,
    marginForOne: boolean
  ];
  export type OutputTuple = [
    poolId: string,
    owner: string,
    positionId: bigint,
    marginAmount: bigint,
    marginTotal: bigint,
    borrowAmount: bigint,
    marginForOne: boolean
  ];
  export interface OutputObject {
    poolId: string;
    owner: string;
    positionId: bigint;
    marginAmount: bigint;
    marginTotal: bigint;
    borrowAmount: bigint;
    marginForOne: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    to: AddressLike,
    positionId: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    to: string,
    positionId: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    to: string;
    positionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    positionId: BigNumberish,
    marginAmount: BigNumberish,
    marginTotal: BigNumberish,
    borrowAmount: BigNumberish,
    changeAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    positionId: bigint,
    marginAmount: bigint,
    marginTotal: bigint,
    borrowAmount: bigint,
    changeAmount: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    positionId: bigint;
    marginAmount: bigint;
    marginTotal: bigint;
    borrowAmount: bigint;
    changeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayCloseEvent {
  export type InputTuple = [
    poolId: BytesLike,
    sender: AddressLike,
    positionId: BigNumberish,
    releaseMarginAmount: BigNumberish,
    releaseMarginTotal: BigNumberish,
    repayAmount: BigNumberish,
    repayRawAmount: BigNumberish,
    pnlAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    sender: string,
    positionId: bigint,
    releaseMarginAmount: bigint,
    releaseMarginTotal: bigint,
    repayAmount: bigint,
    repayRawAmount: bigint,
    pnlAmount: bigint
  ];
  export interface OutputObject {
    poolId: string;
    sender: string;
    positionId: bigint;
    releaseMarginAmount: bigint;
    releaseMarginTotal: bigint;
    repayAmount: bigint;
    repayRawAmount: bigint;
    pnlAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarginPositionManager extends BaseContract {
  connect(runner?: ContractRunner | null): MarginPositionManager;
  waitForDeployment(): Promise<this>;

  interface: MarginPositionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  checker: TypedContractMethod<[], [string], "view">;

  close: TypedContractMethod<
    [
      positionId: BigNumberish,
      closeMillionth: BigNumberish,
      pnlMinAmount: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPosition: TypedContractMethod<
    [positionId: BigNumberish],
    [MarginPositionStructOutput],
    "view"
  >;

  getPositionId: TypedContractMethod<
    [
      poolId: BytesLike,
      marginForOne: boolean,
      owner: AddressLike,
      isMargin: boolean
    ],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  liquidateBurn: TypedContractMethod<
    [positionId: BigNumberish],
    [[bigint, bigint] & { profit: bigint; repayAmount: bigint }],
    "nonpayable"
  >;

  liquidateCall: TypedContractMethod<
    [positionId: BigNumberish],
    [[bigint, bigint] & { profit: bigint; repayAmount: bigint }],
    "payable"
  >;

  margin: TypedContractMethod<
    [params: MarginParamsStruct],
    [[bigint, bigint]],
    "payable"
  >;

  modify: TypedContractMethod<
    [positionId: BigNumberish, changeAmount: BigNumberish],
    [void],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pairPoolManager: TypedContractMethod<[], [string], "view">;

  repay: TypedContractMethod<
    [
      positionId: BigNumberish,
      repayAmount: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setMarginChecker: TypedContractMethod<
    [_checker: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "close"
  ): TypedContractMethod<
    [
      positionId: BigNumberish,
      closeMillionth: BigNumberish,
      pnlMinAmount: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [MarginPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionId"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      marginForOne: boolean,
      owner: AddressLike,
      isMargin: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidateBurn"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [[bigint, bigint] & { profit: bigint; repayAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateCall"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [[bigint, bigint] & { profit: bigint; repayAmount: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "margin"
  ): TypedContractMethod<
    [params: MarginParamsStruct],
    [[bigint, bigint]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "modify"
  ): TypedContractMethod<
    [positionId: BigNumberish, changeAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pairPoolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      positionId: BigNumberish,
      repayAmount: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarginChecker"
  ): TypedContractMethod<[_checker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "CheckerChanged"
  ): TypedContractEvent<
    CheckerChangedEvent.InputTuple,
    CheckerChangedEvent.OutputTuple,
    CheckerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "Margin"
  ): TypedContractEvent<
    MarginEvent.InputTuple,
    MarginEvent.OutputTuple,
    MarginEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Modify"
  ): TypedContractEvent<
    ModifyEvent.InputTuple,
    ModifyEvent.OutputTuple,
    ModifyEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RepayClose"
  ): TypedContractEvent<
    RepayCloseEvent.InputTuple,
    RepayCloseEvent.OutputTuple,
    RepayCloseEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Burn(bytes32,address,uint256,uint8)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "CheckerChanged(address,address)": TypedContractEvent<
      CheckerChangedEvent.InputTuple,
      CheckerChangedEvent.OutputTuple,
      CheckerChangedEvent.OutputObject
    >;
    CheckerChanged: TypedContractEvent<
      CheckerChangedEvent.InputTuple,
      CheckerChangedEvent.OutputTuple,
      CheckerChangedEvent.OutputObject
    >;

    "Liquidate(bytes32,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "Margin(bytes32,address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      MarginEvent.InputTuple,
      MarginEvent.OutputTuple,
      MarginEvent.OutputObject
    >;
    Margin: TypedContractEvent<
      MarginEvent.InputTuple,
      MarginEvent.OutputTuple,
      MarginEvent.OutputObject
    >;

    "Mint(bytes32,address,address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Modify(bytes32,address,uint256,uint256,uint256,uint256,int256)": TypedContractEvent<
      ModifyEvent.InputTuple,
      ModifyEvent.OutputTuple,
      ModifyEvent.OutputObject
    >;
    Modify: TypedContractEvent<
      ModifyEvent.InputTuple,
      ModifyEvent.OutputTuple,
      ModifyEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RepayClose(bytes32,address,uint256,uint256,uint256,uint256,uint256,int256)": TypedContractEvent<
      RepayCloseEvent.InputTuple,
      RepayCloseEvent.OutputTuple,
      RepayCloseEvent.OutputObject
    >;
    RepayClose: TypedContractEvent<
      RepayCloseEvent.InputTuple,
      RepayCloseEvent.OutputTuple,
      RepayCloseEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
